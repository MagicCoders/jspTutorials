1
00:00:01,268 --> 00:00:02,444
<v Instructor>Hey!</v>

2
00:00:02,444 --> 00:00:06,611
In this video, we're gonna discuss the JSTL Core Tags.

3
00:00:07,544 --> 00:00:09,287
So as you know there's a collection of

4
00:00:09,287 --> 00:00:12,162
five tag libraries in JSTL.

5
00:00:12,162 --> 00:00:14,761
So we'll take a look at some of the commonly used tags

6
00:00:14,761 --> 00:00:16,428
in the Core library.

7
00:00:20,030 --> 00:00:21,853
Now, in JSTL Core Tags,

8
00:00:21,853 --> 00:00:24,621
there's a collection of about fifteen tags.

9
00:00:24,621 --> 00:00:26,509
Now, we're not gonna cover all of them

10
00:00:26,509 --> 00:00:28,166
but I will give you just a quick,

11
00:00:28,166 --> 00:00:30,101
high level discussion of them.

12
00:00:30,101 --> 00:00:32,222
So starting at the top, there's a catch tag

13
00:00:32,222 --> 00:00:34,110
for handling exceptions.

14
00:00:34,110 --> 00:00:36,565
The next two tags, for choose and if,

15
00:00:36,565 --> 00:00:39,101
primarily for conditionals like using switch statements

16
00:00:39,101 --> 00:00:41,269
or traditional if statements.

17
00:00:41,269 --> 00:00:44,125
The next tag here is import for retrieving

18
00:00:44,125 --> 00:00:46,813
relative URLs or absolute URLs.

19
00:00:46,813 --> 00:00:50,004
The most commonly used on TRL forEach and forTokens.

20
00:00:50,004 --> 00:00:53,186
Basically allows you to loop over a collection of data.

21
00:00:53,186 --> 00:00:55,186
And we'll use that in this video.

22
00:00:55,186 --> 00:00:58,686
There's the out tag for displaying output.

23
00:01:00,707 --> 00:01:03,379
Otherwise is for handling the choose tag.

24
00:01:03,379 --> 00:01:06,948
Params, redirects, removes, sets, URLs, and when.

25
00:01:06,948 --> 00:01:09,056
So, again, a lot of tags here.

26
00:01:09,056 --> 00:01:11,788
I'll cover the most commonly used tags in the video.

27
00:01:11,788 --> 00:01:13,501
Hey, but don't worry.

28
00:01:13,501 --> 00:01:17,376
You may wanna exhaustive, deep dive on each one of the tags.

29
00:01:17,376 --> 00:01:19,160
At the end of this video I'll give you links

30
00:01:19,160 --> 00:01:22,477
to documentation that covers each tag in detail.

31
00:01:22,477 --> 00:01:25,310
So don't worry, I got you covered.

32
00:01:27,422 --> 00:01:30,722
Alright, so, every page that makes use of the Core tags,

33
00:01:30,722 --> 00:01:32,611
must include this reference.

34
00:01:32,611 --> 00:01:34,610
So you have to yield the angle bracket percent

35
00:01:34,610 --> 00:01:35,722
with an @ symbol.

36
00:01:35,722 --> 00:01:37,978
You say taglib, and then give the uri.

37
00:01:37,978 --> 00:01:40,434
So the uri must match exactly what you see here

38
00:01:40,434 --> 00:01:41,770
on the screen.

39
00:01:41,770 --> 00:01:44,290
And then you specify a prefix of C.

40
00:01:44,290 --> 00:01:46,636
Now one thing about the uri is that

41
00:01:46,636 --> 00:01:48,509
it's a bit misleading.

42
00:01:48,509 --> 00:01:50,716
There's no real connection to the internet

43
00:01:50,716 --> 00:01:52,772
to make use of this tag library.

44
00:01:52,772 --> 00:01:54,892
It's simply a unique identifier.

45
00:01:54,892 --> 00:01:57,340
They'll actually make use of this unique identifier

46
00:01:57,340 --> 00:01:59,268
when they scan your local jar file

47
00:01:59,268 --> 00:02:01,052
that's part of your project.

48
00:02:01,052 --> 00:02:03,396
So again, no connection to the internet.

49
00:02:03,396 --> 00:02:06,935
Simply a unique identifier that associates your tag

50
00:02:06,935 --> 00:02:10,685
in the jar filed locally on your file system.

51
00:02:12,627 --> 00:02:14,139
Alright so lets look at an example

52
00:02:14,139 --> 00:02:16,211
of making use of that forEach tag.

53
00:02:16,211 --> 00:02:19,003
So what I wanna do here is have a list of data,

54
00:02:19,003 --> 00:02:21,531
and loop over it and display that data.

55
00:02:21,531 --> 00:02:24,861
So, starting at the top, I'm gonna setup some sample data.

56
00:02:24,861 --> 00:02:26,645
Now this is part of a scriptlet

57
00:02:26,645 --> 00:02:29,984
and I know I say hey, use JSTL to minimize scriptlets,

58
00:02:29,984 --> 00:02:32,120
but I'm basically using scriptlets here

59
00:02:32,120 --> 00:02:33,940
just to load some sample data.

60
00:02:33,940 --> 00:02:36,475
So, don't yell at me about this.

61
00:02:36,475 --> 00:02:38,627
In general in the real world this'll normally

62
00:02:38,627 --> 00:02:40,860
be provided by your MVC system.

63
00:02:40,860 --> 00:02:44,003
And don't worry, later in the course we'll cover MVC

64
00:02:44,003 --> 00:02:48,051
and I'll show you how to integrate MVC, which ASPs.

65
00:02:48,051 --> 00:02:49,012
So don't worry.

66
00:02:49,012 --> 00:02:51,376
But right now we're simply gonna set up an array

67
00:02:51,376 --> 00:02:55,534
of cities Mumbai, Singapore, and my beloved Philadelphia.

68
00:02:55,534 --> 00:02:57,837
And then I'll set this up as an attribute.

69
00:02:57,837 --> 00:03:00,597
So whenever you make use of the JSTL tags,

70
00:03:00,597 --> 00:03:02,509
they have to be part of an attribute

71
00:03:02,509 --> 00:03:04,629
of one of the scopes either page request,

72
00:03:04,629 --> 00:03:06,501
session or application.

73
00:03:06,501 --> 00:03:10,101
So here I'm gonna set the pageContext.setAttribute.

74
00:03:10,101 --> 00:03:12,693
I give the name of my cities comma

75
00:03:12,693 --> 00:03:14,981
the reference of the object, cities.

76
00:03:14,981 --> 00:03:18,064
So we give the name comma value pair.

77
00:03:19,629 --> 00:03:21,340
Then I can move down into my body

78
00:03:21,340 --> 00:03:23,781
and I can make use of this forEach tag.

79
00:03:23,781 --> 00:03:26,524
So here I basically setup c:forEach,

80
00:03:26,524 --> 00:03:29,839
so I give the prefix which is C, colon forEach,

81
00:03:29,839 --> 00:03:32,072
and then I setup a variable tempCity.

82
00:03:32,072 --> 00:03:33,921
So that's a temporary variable that we'll have

83
00:03:33,921 --> 00:03:36,767
as we loop through this array.

84
00:03:36,767 --> 00:03:39,489
So then for items I specify the reference

85
00:03:39,489 --> 00:03:42,263
to the collection or array that I wanna loop over.

86
00:03:42,263 --> 00:03:44,831
And I make use of a JSP expression language here.

87
00:03:44,831 --> 00:03:49,174
So I use dollar sign, colon curly brace, myCities.

88
00:03:49,174 --> 00:03:51,790
So this is the actual name of the attribute.

89
00:03:51,790 --> 00:03:54,046
So it's not a direct reference of the object,

90
00:03:54,046 --> 00:03:57,475
it's a name of the attribute, myCities.

91
00:03:57,475 --> 00:03:59,419
Now, once I'm inside the for loop,

92
00:03:59,419 --> 00:04:03,586
then I can simply make use of that temporary variable.

93
00:04:04,578 --> 00:04:07,530
I can say dollar sign curly brace, tempCity.

94
00:04:07,530 --> 00:04:09,274
And the break on it, and that's it.

95
00:04:09,274 --> 00:04:11,394
So the desired output is what we'll see here

96
00:04:11,394 --> 00:04:14,872
on the screen, we'll see our list of cities

97
00:04:14,872 --> 00:04:16,955
displayed using this JCL.

98
00:04:17,978 --> 00:04:20,498
That's basically it for the coding for that.

99
00:04:20,498 --> 00:04:22,090
And in the next video I'll actually show you

100
00:04:22,090 --> 00:04:24,114
some hands on coding while we'll write the code

101
00:04:24,114 --> 00:04:26,531
for all of this from scratch.

102
00:04:28,989 --> 00:04:31,964
Now as I mentioned, I'm providing some resources for you

103
00:04:31,964 --> 00:04:33,276
to get all the details.

104
00:04:33,276 --> 00:04:34,836
So if you wanted to get all the details

105
00:04:34,836 --> 00:04:37,012
about every tag in the Core library,

106
00:04:37,012 --> 00:04:39,460
you can make use of these references here.

107
00:04:39,460 --> 00:04:42,180
So these websites that I have listed on the slide,

108
00:04:42,180 --> 00:04:44,444
these are basically just redirects to the official

109
00:04:44,444 --> 00:04:47,332
documentation from Oracle.

110
00:04:47,332 --> 00:04:50,265
So I have links here for the custom tags tutorial,

111
00:04:50,265 --> 00:04:52,052
JSTL tutorial.

112
00:04:52,052 --> 00:04:55,239
The JSTL JavaDoc gives you the actual documentation

113
00:04:55,239 --> 00:04:58,421
for every tag along with all of their attributes.

114
00:04:58,421 --> 00:05:01,584
And then the JSTL Specification PDF again,

115
00:05:01,584 --> 00:05:04,054
gives you more details on each one of the tags,

116
00:05:04,054 --> 00:05:06,352
and their use cases.

117
00:05:06,352 --> 00:05:08,438
So if you wanted details on every tag,

118
00:05:08,438 --> 00:05:11,021
you can follow those resources.

119
00:05:11,956 --> 00:05:13,844
Okay great, so the next video we'll actually

120
00:05:13,844 --> 00:05:16,684
write some code, and we'll make use of this JSTL tag.

121
00:05:16,684 --> 00:05:18,517
So I'll see you there.

